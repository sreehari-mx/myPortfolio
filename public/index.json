[{"content":"From Packets to Protocols: My Cybersecurity Learning Journey as a Beginner Introduction In this post, I‚Äôd like to share my learning journey over the past couple of months as a beginner in cybersecurity. I started with the basics of computer networking, explored key protocols, practiced Linux fundamentals, and even dipped my toes into programming. If you\u0026rsquo;re also just starting out in this exciting field, I hope this post will offer some guidance, inspiration, or simply reassurance that you‚Äôre not alone.\nNetworking: The Foundation of Cybersecurity When I first began exploring cybersecurity, I quickly realized that networking is the foundation of everything. Over the past few months, I‚Äôve been learning, experimenting, and practicing the core concepts behind how data moves across the internet and internal networks.\nI was already using Ubuntu on VMware for some light programming and experimentation. So I had a basic understanding of Linux commands. However, I had zero knowledge of networking, especially since I don‚Äôt come from a computer science background.\nI started searching for ‚ÄúNetworking for Beginners‚Äù on YouTube. I watched tons of videos‚Äîsome more helpful than others. David Bombal‚Äôs CCNA playlist was a standout. It gave me a clear understanding of network devices and how they function.\nBut I wanted more depth, so I searched for full beginner networking courses and found a 12-hour video course(You can find the link in the Resources section.). It wasn‚Äôt the most viewed, but it clearly explained concepts like the TCP/IP model (layer by layer), switches, routers, subnetting, and essential terminology. I completed it in a week.\nOne mistake I made early on was not taking structured notes. I watched the videos and understood the concepts, but most of the information faded after a few weeks. That‚Äôs when I decided to keep a dedicated Cybersecurity Notebook‚Äîa game-changer.\nI soon realized theory wasn‚Äôt enough. I needed hands-on practice. So I installed Cisco Packet Tracer on Ubuntu and began creating simple networks by following YouTube tutorials. This was a turning point‚Äîit helped me visualize and truly understand how data flows through a network. I simulated ARP, ICMP, STP traffic and observed how different protocols work.\nJeremy‚Äôs CCNA playlist helped me with creating subnets and configuring switches and routers via CLI.\nAs my curiosity grew, I started asking questions like:\nHow do these protocols actually work? Why are they needed? What happens when I tap the ‚ÄúWi-Fi‚Äù button on my smartphone? I used ChatGPT to get answers, and that curiosity kept fueling my progress.\nAfter gaining confidence with simulations, I moved on to capturing real network traffic using Wireshark. I set up a Kali Linux VM and captured traffic during activities like:\nDownloading files Running apt update Streaming YouTube videos Sending HTTP/HTTPS/FTP/DNS requests Connecting via VPNs I experimented with network interfaces, tunneling, and gateways, and also explored tools like Tor, VPNs, and proxychains.\nGoogle Cybersecurity Certificate I completed the Google Cybersecurity Professional Certificate on Coursera in about a month. It‚Äôs a beginner-friendly, theory-heavy course with practical labs in:\nLinux Fundamentals: File structure, permissions, user management, etc. SQL Basics: Filtering and analyzing data from log files. Python Scripting: Automating tasks like parsing logs. SIEM Tools: Intro to Chronicle, Splunk. IDS Tools: Suricata, basic packet analysis using Wireshark and tcpdump. It also covered essential cybersecurity concepts like:\nRisk assessment, threat modeling, vulnerabilities MITRE ATT\u0026amp;CK, NIST RMF frameworks Incident response, detection and recovery workflows Job preparation: Resume tips, interview prep, and how to use AI tools in job searching. One of the most motivating parts of the course was hearing real-life stories from Google cybersecurity professionals who came from non-CS backgrounds. It reassured me that a non-traditional path into cybersecurity is not only possible but increasingly common.\nLinux \u0026amp; Virtual Labs After completing the Google course, I focused on Linux and building virtual labs using VMware. I installed Kali Linux, Debian, and Metasploitable2 in an isolated virtual environment to practice safely.\nKey Tools \u0026amp; Skills I Focused On: Wireshark: Captured live traffic and studied TCP/IP behavior (three-way handshake, sequence numbers, acknowledgments, headers, etc.) Nmap: Explored different scan types, observed traffic patterns during scans, and captured packets to understand what\u0026rsquo;s happening behind each command. UFW Firewall: Installed on Debian, tested different configurations, and observed how firewall rules affect Nmap scans. Apache2 Setup: Hosted a basic site on Debian, accessed it from Kali, and captured HTTP request/response headers. Password Cracking: Used John the Ripper for encryption, decryption, and hash cracking practice. Attacking Vulnerable Machines (Ethically) After getting familiar with tools and basic protocols, I began exploring vulnerable machines (for ethical hacking practice).\nüõ°Ô∏è Attack 1: ARP Spoofing with Ettercap Kali (attacker), Debian (client), Metasploitable2 (server) Used Ettercap to spoof ARP tables Logged into an HTTP service from the client and captured the username and password on the attacking machine üõ°Ô∏è Attack 2: VSFTPD Exploit Used Metasploit to exploit the vsftpd backdoor vulnerability Learned that if a username included :), it triggered a shell on port 6200 Connected manually via netcat and obtained a reverse shell üõ°Ô∏è Attack 3: Brute-Force FTP Login Used Hydra to perform brute-force attack on FTP credentials Captured both network traffic and login attempts via logs Questions That Drove My Curiosity Here are some of the key questions that kept me exploring deeper:\nWhat is the internet, and how does it work? What actually happens when we tap the Wi-Fi or network button on a smartphone? Can ISPs see everything we search? What does \u0026ldquo;1.5GB/day\u0026rdquo; actually mean, and how do ISPs enforce it? How do VPNs work, and why are they important? What are IP addresses, and why do we have both private and public ones? How does DNS work? What‚Äôs the difference between a modem and a router? How do devices on a LAN get their IP addresses? How does traceroute work? What happens when we run sudo apt update? How does the Linux file permission system work? Conclusion When I started learning networking, I had a lot of questions (some of which are listed above). That curiosity became the fuel for my journey. Today, I have a solid foundational understanding of networking, protocols, traffic analysis, and basic attack vectors.\nI can confidently explain how the internet works, the role of clients and servers, and how different protocols interact at each layer.\nThis is the first big step in my cybersecurity journey, and I\u0026rsquo;m excited for what‚Äôs ahead.\nIf you‚Äôre a beginner like me, I hope this post gave you some insights, motivation, or just reassurance that you‚Äôre on the right path. Keep asking questions‚Äîand keep learning.\nResources I Used Networking üé• David Bombal CCNA Playlist üé• Jeremy‚Äôs IT Lab CCNA Playlist üé• Chris Greer Wireshark Tutorials üì∫ Networking Full Course Linux Fundamentals üé• NetworkChuck - Linux for Hackers üïπÔ∏è OverTheWire - Bandit Wargame üîê TryHackMe - Linux Fundamentals üéì TCM Security - Linux 101: Fundamentals Thank You Thank you for taking the time to read about my journey. If you\u0026rsquo;re just starting out in cybersecurity like I did, I hope this post gave you some direction or motivation. Feel free to connect or reach out if you\u0026rsquo;re on a similar path ‚Äî I\u0026rsquo;d love to learn together!\nHappy learning, and stay curious!\n","permalink":"http://localhost:1313/blog/getting-the-fundamentals/","summary":"\u003ch1 id=\"from-packets-to-protocols-my-cybersecurity-learning-journey-as-a-beginner\"\u003eFrom Packets to Protocols: My Cybersecurity Learning Journey as a Beginner\u003c/h1\u003e\n\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eIn this post, I‚Äôd like to share my learning journey over the past couple of months as a beginner in cybersecurity. I started with the basics of computer networking, explored key protocols, practiced Linux fundamentals, and even dipped my toes into programming. If you\u0026rsquo;re also just starting out in this exciting field, I hope this post will offer some guidance, inspiration, or simply reassurance that you‚Äôre not alone.\u003c/p\u003e","title":"Getting The Fundamentals"},{"content":"How I Built My First Website Using Hugo Introduction Building a website from scratch can seem intimidating ,but static site generators like Hugo make it much easier. In this post , I\u0026rsquo;ll share my experience of creating my first static website using Hugo and walk you though the process step by step.\nWhat is Hugo Hugo is a lightning-fast static generator written in Go. It helps you to build websites quickly without needing a database. With Hugo, you can create content using Markdown and generate a fully functional website with themes and templates.\nWhy I Chose Hugo Fast and lightweight - Hugo generates pages in milliseconds. Easy to use - Simple Markdown based content management. Customizable - Supports themes,templates, and shortcodes. No dependencies - No need for PHP,database, or CMS. Setting up hugo To get started with Hugo, follow these steps :\n1. Install Hugo On Linux/macOS:\nsudo apt install hugo # For Debain-based systems brew install hugo # For macOS (using Homebrew) hugo version # For verify the installation On Windows :\nVisit Hugo\u0026rsquo;s Official Website Extract the archives and move hugo.exe to a folder in your system PATH. Verify installation : hugo version 2. Create a New Hugo site Run the following command to create a new blog hugo new site my-blog cd my-blog 3. Add a Theme Visit Hugo Themes and choose a theme. I am using the PaperMod theme Install it using : cd /themes git clone https://github.com/adityatelange/hugo-PaperMod.git Edit the hugo.toml/yaml(.yaml can be more flexible) file using any text editor, I prefer Visual Studio Code editor. baseURL: \u0026#34;\u0026#34; languageCode: en-us title: theme: hugo-PaperMod Give the appropriate baseURL and title. You can customize the page according to the theme you have chosen(Check out the theme documentation) 4. Create Your First Blog hugo new posts/my-first-blog.md Edit the file inside content/post/ and add your blog content using Markdown Don\u0026rsquo;t forget to change draft: true into draft : false 5. Run Hugo Locally To preview your site , run : hugo server -D Open the link http://localhost:1313/ in your browser. 6. Creat a Git Repository git init touch .gitmodules Add the theme submodule path = themes/hugo-PaperMod url = \u0026#34;https://github.com/adityatelange/hugo-PaperMod.git\u0026#34; Commit the changes Push it to your gihub account as a public repository 7.Deploy the Website Using Netlify Visit Netlify Official Website Sign up Add new site and connect your git repostitory with netlify. change : Build command \u0026ndash;\u0026gt; hugo Publish directory \u0026ndash;\u0026gt; public On advanced setting give Key as HUGO_VERSION and Value as hugo version installed on your system . Click Deploy site 8. Setup the BaseURL change the baseURL on the config.yaml file and commit the chages Conclusion Congratualtions ! You\u0026rsquo;ve successfully built and deployed your own Hugo-powered blog on Netlify. In this guide, we covered :\nInstalling and setting up Hugo. Creating a new blog and adding a theme. Writing your first blog post . Deploying the blog to Netlify. With this setup, you can now focus on writing great content without worrying about complex configurations. If you find this guide helpful, feel free to share it with others. Happy blogging!\nSources \u0026amp; Credits Throughout this journey of building and deploying a Hugo blog, I refered to several resources that provided valuable guidance. Here are some of them:\nHugo Official Documentation - for learnig Hugo commands and configurations. Hugo Themes- To choose and install a theme for the site. https://youtu.be/LIFvgrRxdt4?si=qRrf_WF3hfLLs6Ds https://youtu.be/hjD9jTi_DQ4?si=7e_JRhWTbkEeZXWp https://youtu.be/EZI9kydYhfA?si=5ChEWWfy2omft1v1 If you encounter any problems with the steps, I highly recommend watching the tutorials I\u0026rsquo;ve shared above. ","permalink":"http://localhost:1313/blog/getting-started-with-hugo/","summary":"\u003ch1 id=\"how-i-built-my-first-website-using-hugo\"\u003eHow I Built My First Website Using Hugo\u003c/h1\u003e\n\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eBuilding a website from scratch can seem intimidating ,but static site generators like \u003cstrong\u003eHugo\u003c/strong\u003e make it much easier. In this post ,  I\u0026rsquo;ll share my experience of creating my first static website using Hugo and walk you though the process step by step.\u003c/p\u003e\n\u003ch2 id=\"what-is-hugo\"\u003eWhat is Hugo\u003c/h2\u003e\n\u003cp\u003eHugo is a \u003cstrong\u003elightning-fast static generator\u003c/strong\u003e written in Go. It helps you to build websites quickly without needing a database. With Hugo, you can create content using \u003cstrong\u003eMarkdown\u003c/strong\u003e and generate a fully functional website with themes and templates.\u003c/p\u003e","title":"Getting Started With Hugo"},{"content":"From Packets to Protocols: My Cybersecurity Learning Journey as a Beginner Introduction In this post, I‚Äôd like to share my learning journey over the past couple of months as a beginner in cybersecurity. I started with the basics of computer networking, explored key protocols, practiced Linux fundamentals, and even dipped my toes into programming. If you\u0026rsquo;re also just starting out in this exciting field, I hope this post will offer some guidance, inspiration, or simply reassurance that you‚Äôre not alone.\nNetworking: The Foundation of Cybersecurity When I first began exploring cybersecurity, I quickly realized that networking is the foundation of everything. Over the past few months, I‚Äôve been learning, experimenting, and practicing the core concepts behind how data moves across the internet and internal networks.\nI was already using Ubuntu on VMware for some light programming and experimentation. So I had a basic understanding of Linux commands. However, I had zero knowledge of networking, especially since I don‚Äôt come from a computer science background.\nI started searching for ‚ÄúNetworking for Beginners‚Äù on YouTube. I watched tons of videos‚Äîsome more helpful than others. David Bombal‚Äôs CCNA playlist was a standout. It gave me a clear understanding of network devices and how they function.\nBut I wanted more depth, so I searched for full beginner networking courses and found a 12-hour video course(You can find the link in the Resources section.). It wasn‚Äôt the most viewed, but it clearly explained concepts like the TCP/IP model (layer by layer), switches, routers, subnetting, and essential terminology. I completed it in a week.\nOne mistake I made early on was not taking structured notes. I watched the videos and understood the concepts, but most of the information faded after a few weeks. That‚Äôs when I decided to keep a dedicated Cybersecurity Notebook‚Äîa game-changer.\nI soon realized theory wasn‚Äôt enough. I needed hands-on practice. So I installed Cisco Packet Tracer on Ubuntu and began creating simple networks by following YouTube tutorials. This was a turning point‚Äîit helped me visualize and truly understand how data flows through a network. I simulated ARP, ICMP, STP traffic and observed how different protocols work.\nJeremy‚Äôs CCNA playlist helped me with creating subnets and configuring switches and routers via CLI.\nAs my curiosity grew, I started asking questions like:\nHow do these protocols actually work? Why are they needed? What happens when I tap the ‚ÄúWi-Fi‚Äù button on my smartphone? I used ChatGPT to get answers, and that curiosity kept fueling my progress.\nAfter gaining confidence with simulations, I moved on to capturing real network traffic using Wireshark. I set up a Kali Linux VM and captured traffic during activities like:\nDownloading files Running apt update Streaming YouTube videos Sending HTTP/HTTPS/FTP/DNS requests Connecting via VPNs I experimented with network interfaces, tunneling, and gateways, and also explored tools like Tor, VPNs, and proxychains.\nGoogle Cybersecurity Certificate I completed the Google Cybersecurity Professional Certificate on Coursera in about a month. It‚Äôs a beginner-friendly, theory-heavy course with practical labs in:\nLinux Fundamentals: File structure, permissions, user management, etc. SQL Basics: Filtering and analyzing data from log files. Python Scripting: Automating tasks like parsing logs. SIEM Tools: Intro to Chronicle, Splunk. IDS Tools: Suricata, basic packet analysis using Wireshark and tcpdump. It also covered essential cybersecurity concepts like:\nRisk assessment, threat modeling, vulnerabilities MITRE ATT\u0026amp;CK, NIST RMF frameworks Incident response, detection and recovery workflows Job preparation: Resume tips, interview prep, and how to use AI tools in job searching. One of the most motivating parts of the course was hearing real-life stories from Google cybersecurity professionals who came from non-CS backgrounds. It reassured me that a non-traditional path into cybersecurity is not only possible but increasingly common.\nLinux \u0026amp; Virtual Labs After completing the Google course, I focused on Linux and building virtual labs using VMware. I installed Kali Linux, Debian, and Metasploitable2 in an isolated virtual environment to practice safely.\nKey Tools \u0026amp; Skills I Focused On: Wireshark: Captured live traffic and studied TCP/IP behavior (three-way handshake, sequence numbers, acknowledgments, headers, etc.) Nmap: Explored different scan types, observed traffic patterns during scans, and captured packets to understand what\u0026rsquo;s happening behind each command. UFW Firewall: Installed on Debian, tested different configurations, and observed how firewall rules affect Nmap scans. Apache2 Setup: Hosted a basic site on Debian, accessed it from Kali, and captured HTTP request/response headers. Password Cracking: Used John the Ripper for encryption, decryption, and hash cracking practice. Attacking Vulnerable Machines (Ethically) After getting familiar with tools and basic protocols, I began exploring vulnerable machines (for ethical hacking practice).\nüõ°Ô∏è Attack 1: ARP Spoofing with Ettercap Kali (attacker), Debian (client), Metasploitable2 (server) Used Ettercap to spoof ARP tables Logged into an HTTP service from the client and captured the username and password on the attacking machine üõ°Ô∏è Attack 2: VSFTPD Exploit Used Metasploit to exploit the vsftpd backdoor vulnerability Learned that if a username included :), it triggered a shell on port 6200 Connected manually via netcat and obtained a reverse shell üõ°Ô∏è Attack 3: Brute-Force FTP Login Used Hydra to perform brute-force attack on FTP credentials Captured both network traffic and login attempts via logs Questions That Drove My Curiosity Here are some of the key questions that kept me exploring deeper:\nWhat is the internet, and how does it work? What actually happens when we tap the Wi-Fi or network button on a smartphone? Can ISPs see everything we search? What does \u0026ldquo;1.5GB/day\u0026rdquo; actually mean, and how do ISPs enforce it? How do VPNs work, and why are they important? What are IP addresses, and why do we have both private and public ones? How does DNS work? What‚Äôs the difference between a modem and a router? How do devices on a LAN get their IP addresses? How does traceroute work? What happens when we run sudo apt update? How does the Linux file permission system work? Conclusion When I started learning networking, I had a lot of questions (some of which are listed above). That curiosity became the fuel for my journey. Today, I have a solid foundational understanding of networking, protocols, traffic analysis, and basic attack vectors.\nI can confidently explain how the internet works, the role of clients and servers, and how different protocols interact at each layer.\nThis is the first big step in my cybersecurity journey, and I\u0026rsquo;m excited for what‚Äôs ahead.\nIf you‚Äôre a beginner like me, I hope this post gave you some insights, motivation, or just reassurance that you‚Äôre on the right path. Keep asking questions‚Äîand keep learning.\nResources I Used Networking üé• David Bombal CCNA Playlist üé• Jeremy‚Äôs IT Lab CCNA Playlist üé• Chris Greer Wireshark Tutorials üì∫ Networking Full Course Linux Fundamentals üé• NetworkChuck - Linux for Hackers üïπÔ∏è OverTheWire - Bandit Wargame üîê TryHackMe - Linux Fundamentals üéì TCM Security - Linux 101: Fundamentals Thank You Thank you for taking the time to read about my journey. If you\u0026rsquo;re just starting out in cybersecurity like I did, I hope this post gave you some direction or motivation. Feel free to connect or reach out if you\u0026rsquo;re on a similar path ‚Äî I\u0026rsquo;d love to learn together!\nHappy learning, and stay curious!\n","permalink":"http://localhost:1313/blog/getting-the-fundamentals/","summary":"\u003ch1 id=\"from-packets-to-protocols-my-cybersecurity-learning-journey-as-a-beginner\"\u003eFrom Packets to Protocols: My Cybersecurity Learning Journey as a Beginner\u003c/h1\u003e\n\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eIn this post, I‚Äôd like to share my learning journey over the past couple of months as a beginner in cybersecurity. I started with the basics of computer networking, explored key protocols, practiced Linux fundamentals, and even dipped my toes into programming. If you\u0026rsquo;re also just starting out in this exciting field, I hope this post will offer some guidance, inspiration, or simply reassurance that you‚Äôre not alone.\u003c/p\u003e","title":"Getting The Fundamentals"},{"content":"How I Built My First Website Using Hugo Introduction Building a website from scratch can seem intimidating ,but static site generators like Hugo make it much easier. In this post , I\u0026rsquo;ll share my experience of creating my first static website using Hugo and walk you though the process step by step.\nWhat is Hugo Hugo is a lightning-fast static generator written in Go. It helps you to build websites quickly without needing a database. With Hugo, you can create content using Markdown and generate a fully functional website with themes and templates.\nWhy I Chose Hugo Fast and lightweight - Hugo generates pages in milliseconds. Easy to use - Simple Markdown based content management. Customizable - Supports themes,templates, and shortcodes. No dependencies - No need for PHP,database, or CMS. Setting up hugo To get started with Hugo, follow these steps :\n1. Install Hugo On Linux/macOS:\nsudo apt install hugo # For Debain-based systems brew install hugo # For macOS (using Homebrew) hugo version # For verify the installation On Windows :\nVisit Hugo\u0026rsquo;s Official Website Extract the archives and move hugo.exe to a folder in your system PATH. Verify installation : hugo version 2. Create a New Hugo site Run the following command to create a new blog hugo new site my-blog cd my-blog 3. Add a Theme Visit Hugo Themes and choose a theme. I am using the PaperMod theme Install it using : cd /themes git clone https://github.com/adityatelange/hugo-PaperMod.git Edit the hugo.toml/yaml(.yaml can be more flexible) file using any text editor, I prefer Visual Studio Code editor. baseURL: \u0026#34;\u0026#34; languageCode: en-us title: theme: hugo-PaperMod Give the appropriate baseURL and title. You can customize the page according to the theme you have chosen(Check out the theme documentation) 4. Create Your First Blog hugo new posts/my-first-blog.md Edit the file inside content/post/ and add your blog content using Markdown Don\u0026rsquo;t forget to change draft: true into draft : false 5. Run Hugo Locally To preview your site , run : hugo server -D Open the link http://localhost:1313/ in your browser. 6. Creat a Git Repository git init touch .gitmodules Add the theme submodule path = themes/hugo-PaperMod url = \u0026#34;https://github.com/adityatelange/hugo-PaperMod.git\u0026#34; Commit the changes Push it to your gihub account as a public repository 7.Deploy the Website Using Netlify Visit Netlify Official Website Sign up Add new site and connect your git repostitory with netlify. change : Build command \u0026ndash;\u0026gt; hugo Publish directory \u0026ndash;\u0026gt; public On advanced setting give Key as HUGO_VERSION and Value as hugo version installed on your system . Click Deploy site 8. Setup the BaseURL change the baseURL on the config.yaml file and commit the chages Conclusion Congratualtions ! You\u0026rsquo;ve successfully built and deployed your own Hugo-powered blog on Netlify. In this guide, we covered :\nInstalling and setting up Hugo. Creating a new blog and adding a theme. Writing your first blog post . Deploying the blog to Netlify. With this setup, you can now focus on writing great content without worrying about complex configurations. If you find this guide helpful, feel free to share it with others. Happy blogging!\nSources \u0026amp; Credits Throughout this journey of building and deploying a Hugo blog, I refered to several resources that provided valuable guidance. Here are some of them:\nHugo Official Documentation - for learnig Hugo commands and configurations. Hugo Themes- To choose and install a theme for the site. https://youtu.be/LIFvgrRxdt4?si=qRrf_WF3hfLLs6Ds https://youtu.be/hjD9jTi_DQ4?si=7e_JRhWTbkEeZXWp https://youtu.be/EZI9kydYhfA?si=5ChEWWfy2omft1v1 If you encounter any problems with the steps, I highly recommend watching the tutorials I\u0026rsquo;ve shared above. ","permalink":"http://localhost:1313/blog/getting-started-with-hugo/","summary":"\u003ch1 id=\"how-i-built-my-first-website-using-hugo\"\u003eHow I Built My First Website Using Hugo\u003c/h1\u003e\n\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eBuilding a website from scratch can seem intimidating ,but static site generators like \u003cstrong\u003eHugo\u003c/strong\u003e make it much easier. In this post ,  I\u0026rsquo;ll share my experience of creating my first static website using Hugo and walk you though the process step by step.\u003c/p\u003e\n\u003ch2 id=\"what-is-hugo\"\u003eWhat is Hugo\u003c/h2\u003e\n\u003cp\u003eHugo is a \u003cstrong\u003elightning-fast static generator\u003c/strong\u003e written in Go. It helps you to build websites quickly without needing a database. With Hugo, you can create content using \u003cstrong\u003eMarkdown\u003c/strong\u003e and generate a fully functional website with themes and templates.\u003c/p\u003e","title":"Getting Started With Hugo"}]